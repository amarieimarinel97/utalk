package com.utalk.repository;

import com.utalk.configuration.ApplicationConfiguration;

import javafx.util.Pair;
import org.apache.commons.dbcp2.BasicDataSource;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class DatabaseConnection {

    private static BasicDataSource basicDataSource = setUpBasicDataSource();

    private DatabaseConnection() {
    }

    private static BasicDataSource setUpBasicDataSource() {
        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(ApplicationConfiguration.class);
        ApplicationConfiguration applicationConfiguration = applicationContext.getBean(ApplicationConfiguration.class);
        return applicationConfiguration.getSpringDataSource();
    }

    public static Connection getConnection() {
        try {
            return basicDataSource.getConnection();
        } catch (SQLException exceptionSQL) {
            System.out.println("Database connection could not be established: " + exceptionSQL.getMessage());
            return null;
        }
    }

    public static void initDatabase(Connection connection) {
        for (Pair<String, String> tableDefinition : tableDefinitions) {
            if (checkIfTableExists(tableDefinition.getKey(), connection)) {
                System.out.println("Table: " + tableDefinition.getKey() + " already created in public schema.");
            } else {
                createTable(connection, tableDefinition.getKey(), tableDefinition.getValue());
            }
        }
    }

    private static boolean checkIfTableExists(String tableName, Connection connection) {
        boolean isCreated = false;
        try (PreparedStatement checkIfTableIsCreated = connection
                .prepareStatement(String.format("SELECT * FROM cat WHERE " +
                        "EXISTS(SELECT * FROM cat WHERE table_name='%s') " +
                        "AND table_name='%s'", tableName.toUpperCase(), tableName.toUpperCase()))) {
            checkIfTableIsCreated.execute();
            try (ResultSet resultSet = checkIfTableIsCreated.getResultSet()) {
                if (resultSet.next()) {
                    String result = resultSet.getString("TABLE_TYPE");
                    isCreated = result.contentEquals("TABLE");
                }
            }
        } catch (SQLException e) {
            System.out.println("Database connection could not be established: " + e.getMessage());
        }
        return isCreated;
    }

    private static void createTable(Connection connection, String tableName, String columns) {
        try (PreparedStatement createTable = connection.prepareStatement(String.format("CREATE TABLE %s" +
                "(%s)", tableName, columns))) {
            createTable.executeUpdate();
            System.out.println("Table: " + tableName + " created successfully in public schema.");
        } catch (SQLException e) {
            System.out.println("Table: " + tableName + " could not be created : " + e.getMessage());
        }
    }

    private static List<Pair<String, String>> tableDefinitions;

    static {
        tableDefinitions = new ArrayList<>();
        tableDefinitions.add(new Pair<>("profiles",
                "id NUMBER(6) GENERATED by default on null as IDENTITY," +
                        "name varchar2(50),"+
                        "photo VARCHAR2(50)," +
                        "occupation VARCHAR2(50)," +
                        "birthdate DATE," +
                        "location VARCHAR2(50)," +
                        "CONSTRAINT profiles_pkey PRIMARY KEY(id)"));
        tableDefinitions.add(new Pair<>("friendship",
                "id NUMBER(6) GENERATED by default on null as IDENTITY," +
                        "user_id1 NUMBER(6)," +
                        "user_id2 NUMBER(6)"
                        ));

        tableDefinitions.add(new Pair<>("users",
                        "username VARCHAR2(50),"+
                        "password VARCHAR2(50)," +
                        "profile_id NUMBER(6),"+
                        "CONSTRAINT users_fkey FOREIGN KEY(profile_id) REFERENCES profiles(id),"+
                        "CONSTRAINT users_pkey PRIMARY KEY(username)"));


//        tableDefinitions.add(new Pair<>("disciplines",
//                "id serial NOT NULL,\n" +
//                        "name text NOT NULL UNIQUE,\n" +
//                        "CONSTRAINT disciplines_pkey PRIMARY KEY(id)\n"));
//        tableDefinitions.add(new Pair<>("types",
//                "id serial NOT NULL,\n" +
//                        "name text NOT NULL UNIQUE,\n" +
//                        "nr_answers integer NOT NULL,\n" +
//                        "CONSTRAINT types_pkey PRIMARY KEY(id)\n"));
//        tableDefinitions.add(new Pair<>("difficulties",
//                "id serial NOT NULL,\n" +
//                        "type text NOT NULL UNIQUE,\n" +
//                        "value integer NOT NULL UNIQUE,\n" +
//                        "CONSTRAINT difficulties_pkey PRIMARY KEY(id)\n"));
//        tableDefinitions.add(new Pair<>("points",
//                "id serial NOT NULL,\n" +
//                        "value integer NOT NULL UNIQUE,\n" +
//                        "CONSTRAINT points_pkey PRIMARY KEY(id)\n"));
//        tableDefinitions.add(new Pair<>("questions",
//                "id serial NOT NULL,\n" +
//                        "active boolean NOT NULL,\n" +
//                        "content text NOT NULL,\n" +
//                        "choices text[],\n" +
//                        "type_id integer NOT NULL,\n" +
//                        "discipline_id integer NOT NULL,\n" +
//                        "difficulty_id integer NOT NULL,\n" +
//                        "point_id integer NOT NULL,\n" +
//                        "created_at timestamp NOT NULL,\n" +
//                        "updated_at timestamp NOT NULL,\n" +
//                        "CONSTRAINT questions_pkey PRIMARY KEY (id),\n" +
//                        "CONSTRAINT type_fkey FOREIGN KEY (type_id) REFERENCES types (id) ON DELETE CASCADE,\n" +
//                        "CONSTRAINT discipline_fkey FOREIGN KEY (discipline_id) REFERENCES disciplines (id) ON DELETE CASCADE,\n" +
//                        "CONSTRAINT difficulty_fkey FOREIGN KEY (difficulty_id) REFERENCES difficulties (id) ON DELETE CASCADE,\n" +
//                        "CONSTRAINT point_fkey FOREIGN KEY (point_id) REFERENCES points (id) ON DELETE CASCADE\n"));
//        tableDefinitions.add(new Pair<>("tests",
//                "id serial NOT NULL,\n" +
//                        "name text NOT NULL,\n" +
//                        "discipline_id integer NOT NULL,\n" +
//                        "created_at timestamp NOT NULL,\n" +
//                        "updated_at timestamp NOT NULL,\n" +
//                        "CONSTRAINT tests_pkey PRIMARY KEY (id),\n" +
//                        "CONSTRAINT discipline_fkey FOREIGN KEY (discipline_id) REFERENCES disciplines (id) ON DELETE CASCADE\n"));
//        tableDefinitions.add(new Pair<>("test_questions",
//                "test_id integer NOT NULL,\n" +
//                        "question_id integer NOT NULL,\n" +
//                        "CONSTRAINT test_question_pkey PRIMARY KEY(test_id, question_id),\n" +
//                        "CONSTRAINT test_fkey FOREIGN KEY (test_id) REFERENCES tests (id) ON DELETE CASCADE,\n" +
//                        "CONSTRAINT question_fkey FOREIGN KEY (question_id) REFERENCES questions (id)\n"));
//        tableDefinitions.add(new Pair<>("settings",
//                "availability integer NOT NULL,\n" +
//                        "instructions text NOT NULL,\n" +
//                        "summary text NOT NULL,\n" +
//                        "time integer NOT NULL, \n" +
//                        "email_template text NOT NULL\n"));
//        tableDefinitions.add(new Pair<>("campaigns",
//                "id serial NOT NULL,\n" +
//                        "name text NOT NULL,\n" +
//                        "accounted_person text NOT NULL,\n" +
//                        "start_campaign timestamp NOT NULL,\n" +
//                        "start_promoting timestamp NOT NULL,\n" +
//                        "start_tests timestamp NOT NULL,\n" +
//                        "end_tests timestamp NOT NULL,\n" +
//                        "start_internship timestamp NOT NULL,\n" +
//                        "end_internship timestamp NOT NULL,\n" +
//                        "created_at timestamp NOT NULL,\n" +
//                        "updated_at timestamp NOT NULL,\n" +
//                        "CONSTRAINT campaigns_pkey PRIMARY KEY(id)\n"));
//        tableDefinitions.add(new Pair<>("campaign_discipline_candidates",
//                "campaign_id integer NOT NULL,\n" +
//                        "discipline_id integer NOT NULL,\n" +
//                        "nr_candidates integer NOT NULL,\n" +
//                        "CONSTRAINT campaign_discipline_candidates_pkey PRIMARY KEY(campaign_id, discipline_id),\n" +
//                        "CONSTRAINT campaign_fkey FOREIGN KEY (campaign_id) REFERENCES campaigns (id) ON DELETE CASCADE,\n" +
//                        "CONSTRAINT discipline_fkey FOREIGN KEY (discipline_id) REFERENCES disciplines (id)\n"));
//        tableDefinitions.add(new Pair<>("candidates",
//                "id serial NOT NULL,\n" +
//                        "first_name text NOT NULL,\n" +
//                        "last_name text NOT NULL,\n" +
//                        "university text NOT NULL,\n" +
//                        "faculty text NOT NULL,\n" +
//                        "study_year integer NOT NULL,\n" +
//                        "discipline_id integer NOT NULL,\n" +
//                        "email text NOT NULL,\n" +
//                        "phone text NOT NULL,\n" +
//                        "status text ,\n" +
//                        "grade integer ,\n" +
//                        "internal_candidate boolean ,\n" +
//                        "alumni boolean ,\n" +
//                        "created_at timestamp NOT NULL,\n" +
//                        "CONSTRAINT candidates_pkey PRIMARY KEY(id),\n" +
//                        "CONSTRAINT discipline_fkey FOREIGN KEY(discipline_id) REFERENCES disciplines(id) ON DELETE CASCADE\n"));
//        tableDefinitions.add(new Pair<>("campaigns_candidates",
//                "campaign_id integer NOT NULL,\n" +
//                        "candidate_id integer NOT NULL,\n" +
//                        "CONSTRAINT campaigns_candidates_pkey PRIMARY KEY(campaign_id, candidate_id),\n" +
//                        "CONSTRAINT campaign_fkey FOREIGN KEY (campaign_id) REFERENCES campaigns (id) ON DELETE CASCADE,\n" +
//                        "CONSTRAINT candidate_fkey FOREIGN KEY (candidate_id) REFERENCES candidates (id)\n"));
//        tableDefinitions.add(new Pair<>("exams",
//                "id text primary key,\n" +
//                        "test_id integer NOT NULL,\n" +
//                        "candidate_id integer NOT NULL,\n" +
//                        "create_at timestamp NOT NULL,\n" +
//                        "start_at timestamp,\n" +
//                        "end_at timestamp,\n" +
//                        "expire_at timestamp NOT NULL,\n" +
//                        "last_answered_question integer,\n" +
//                        "submit_times timestamp[],\n" +
//                        "answers text[],\n" +
//                        "CONSTRAINT candidate_fkey FOREIGN KEY (candidate_id) REFERENCES candidates (id) ON DELETE CASCADE,\n" +
//                        "CONSTRAINT test_fkey FOREIGN KEY (test_id) REFERENCES tests (id) ON DELETE CASCADE\n"));
    }
}
